# ТРП-1-23, Стешин П. А Лаб 5

# 1
print("1 Даны строки S и S0. Найти количество вхождений строки S0 в строку S")
S = input("\tВведите строку S: ")
S0 = input("\tВведите строку S0: ")
print(f"\t{S.count(S0)}")


# 2
print("2 Даны строки S и S0. Удалить из строки S первую подстроку,\n" +
      "совпадающую с S0. Если совпадающих подстрок нет,\n" +
      "то вывести строку S без изменений.")
S = input("\tВведите строку S: ")
S0 = input("\tВведите строку S0: ")
if S.startswith(S0):
    print(f"\t{S[len(S0):]}")
else:
    print(f"\t{S}")


# 3
print("3 Даны строки S, S1 и S2. Заменить в строке S последнее вхождение строки S1 на строку S2.")
S = input("\tВведите строку S: ")
S1 = input("\tВведите строку S1: ")
S2 = input("\tВведите строку S2: ")
if S.endswith(S1):
    S = S[:-(len(S1))] + S2
    print(f"\t{S}")
else:
    print(f"\t{S}")


# 4
print("4 Дана строка, содержащая по крайней мере один символ пробела.\n" +
      "Вывести подстроку, расположенную между первым и вторым\n" +
      "пробелом исходной строки. Если строка содержит только один пробел,\n" +
      "то вывести пустую строку.")
s = input("\tВведите строку: ")
parts = s.split()
if len(parts) > 1:
    result = parts[1]
else:
    result = ""
print(f"\t{result}")


# 5
print("5 Дана строка, содержащая по крайней мере один символ пробела.\n " +
      "Вывести подстроку, расположенную между первым и последним \n " +
      "пробелом исходной строки. Если строка содержит только один пробел, \n " +
      "то вывести пустую строку.")
s = input("\tВведите строку: ")
parts = s.split()
if len(parts) > 1:
    result = " ".join(parts[1:-1])
else:
    result = ""
print(f"\t{result}")


# 6
print("6 Дана строка, состоящая из русских слов, разделенных пробелами (одним или несколькими).\n " +
      "Найти количество слов в строке.")
s = input("\tВведите строку: ")
parts = s.split()
print(f"\tКоличество слов в строке: {len(parts)}")


# 7
print("7 Дана строка, состоящая из русских слов, набранных заглавными\n" +
      "буквами и разделенных пробелами (одним или несколькими).\n " +
      "Найти количество слов, которые начинаются и заканчиваются одной и той же буквой.")
s = input("\tВведите строку: ")
words = s.split()
count = 0
if s.isupper():
    for word in words:
        if word[0] == word[-1]:
            count += 1
    print(
        f"\tКоличество слов, которые заканчиваются и начинаются одной и той же буквой: {count}")
else:
    print("\tВы ввели строку, не содержащую заглавные буквы")


# 8
print("8 Дана строка, состоящая из русских слов, набранных заглавными\n" +
      "буквами и разделенных пробелами (одним или несколькими).\n" +
      "Найти количество слов, которые содержат хотя бы одну букву «А».")
s = input("\tВведите строку: ")
words = s.split()
count = 0
if s.isupper():
    for word in words:
        if 'А' in word:
            count += 1
    print(
        f"\tКоличество слов, которые содержат хотя бы одну букву «А»: {count}")
else:
    print("\tВы ввели строку, не содержащую заглавные буквы")


# 9
print("9 Дана строка-предложение с избыточными пробелами между словами.\n" +
      "Преобразовать ее так, чтобы между словами был ровно один пробел.")
s = input("\tВведите строку: ")
res = " ".join(s.split())
print(f"\t{res}")


# 10
print("10 Дана строка, состоящая из русских слов, разделенных пробелами (одним или несколькими).\n" +
      "Найти длину самого короткого слова.")
s = input("\tВведите строку: ")
words = s.split()
min_length = float('inf')

for word in words:
    if len(word) < min_length:
        min_length = len(word)

print(f"\tДлина самого короткого слова: {min_length}")


# 11
print("11 Дана строка, состоящая из русских слов, набранных заглавными\n" +
      "буквами и разделенных пробелами (одним или несколькими). \n" +
      "Преобразовать каждое слово в строке, заменив в нем все последующие \n" +
      "вхождения его первой буквы на символ «.» (точка).\n" +
      "Например, слово «МИНИМУМ» надо преобразовать в «МИНИ.У.». \n" +
      "Количество пробелов между словами не изменять.")
s = input("\tВведите строку: ")
if s.isupper():
    firsT = s[0]
    res = s.replace(firsT, '.')
    res = firsT + res[1:]
    print(f"\t{res}")
else:
    print("\tВы ввели строку, не содержащую заглавные буквы")


# 12
print("12 Дана строка, состоящая из русских слов, набранных заглавными\n" +
      "буквами и разделенных пробелами (одним или несколькими).\n" +
      "Вывести строку, содержащую эти же слова, разделенные одним пробелом и \n" +
      "расположенные в алфавитном порядке")
s = input("\tВведите строку: ")
if s.isupper():
    words = s.split()
    sorted_words = sorted(words)
    res = ' '.join(sorted_words)
    print(f"\t{res}")
else:
    print("\tВы ввели строку, не содержащую заглавные буквы")

# 13
print("13 Дана строка-предложение на русском языке. Подсчитать количество\n" +
      "содержащихся в строке знаков препинания.")
prepins = {'.', ',', ';', ':', '!', '?', '-', '—'}
sentence = input("\tВведите строку: ")
count = 0
for char in sentence:
    if char in prepins:
        count += 1
print(f"\t{count} знаков препинания")


# 14
print("14 Дана строка, содержащая полное имя файла, то есть имя диска, список каталогов (путь),\n" +
      "собственно имя и расширение. Выделить из этой строки имя файла (без расширения).")
s = input("\tВведите строку: ")
split = s.split(sep="\\")
print(f"\t{(split[-1]).split(sep='.')[0]}")


# 15
print("15 Дана строка, содержащая полное имя файла, то есть имя диска, список \n" +
      "каталогов (путь), собственно имя и расширение. Выделить из этой \n" +
      "строки расширение файла (без предшествующей точки)")
s = input("\tВведите строку: ")
split = s.split(sep="\\")
print(f"\t{(split[-1]).split(sep='.')[1]}")


# 16
print("16 Дана строка, содержащая полное имя файла. Выделить из этой строки \n" +
      "название первого каталога (без символов «\»). Если файл содержится в \n" +
      "корневом каталоге, то вывести символ «\».")
s = input("\tВведите строку: ")
split = s.split(sep="\\")
if len(split) > 1:
    first_directory = split[1]
else:
    first_directory = "\\"
print(f"\tНазвание первого каталога: {first_directory}")


# 17
print("17 Дана строка-предложение на русском языке. Зашифровать ее,\n" +
      "выполнив циклическую замену каждой буквы на следующую за ней в алфавите\n" +
      "и сохранив при этом регистр букв («А» перейдет в «Б», «а»\n" +
      "— в «б», «Б» — в «В», «я» — в «а» и т. д.). Букву «ё» в алфавите не\n" +
      "учитывать («е» должна переходить в «ж»). Знаки препинания и пробелы не изменять.")


def enc_sentence(sentence):
    res2 = ""
    for i in sentence:
        if i.isalpha():
            if i == "ё":
                res2 += "ж"
            elif i == "Ё":
                res2 += "Ж"
            elif i == "я":
                res2 += "а"
            elif i == "Я":
                res2 += "А"
            else:
                res = chr(ord(i) + 1)
                if res > "я":
                    res = "а"
                elif res > "Я" and res < "а":
                    res = "А"
                res2 += res
        else:
            res2 += i
    return res2


sentence = input("\tВведите строку: ")
res2 = enc_sentence(sentence)
print(f"\t{res2}")


# 18
print("18 Дана строка-предложение на русском языке и число K (0 < K < 10). \n" +
      "Зашифровать строку, выполнив циклическую замену каждой буквы на \n" +
      "букву того же регистра, расположенную в алфавите на K-й позиции \n" +
      "после шифруемой буквы (например, для K = 2 «А» перейдет в «В», «а» — в «в», \n" +
      "«Б» — в «Г», «я» — в «б» и т. д.). Букву «ё» в алфавите  \n" +
      "не учитывать, знаки препинания и пробелы не изменять.")


def enc_sentence(sentence, k):
    res2 = ""
    for i in sentence:
        if i.isalpha():
            if i == "ё":
                continue
            elif i == "я":
                res = chr(ord("а") + k-1)
            elif i == "Я":
                res = chr(ord("А") + k-1)
            else:
                res = chr(ord(i) + k)
            res2 += res
        else:
            res2 += i
    return res2


sentence = input("\tВведите строку: ")
k = int(input("\tВведите число K: "))
res2 = enc_sentence(sentence, k)
print(f"\t{res2}")

# 19
print("19 Дано зашифрованное предложение на русском языке (способ шифрования описан в предыдущем задании)\n" +
      "и кодовое смещение K(0 < K < 10). Расшифровать предложение.")


def dec_sentence(sentence, k):
    res2 = ""
    for i in sentence:
        if i.isalpha():
            if i == "ё":
                continue
            elif i == "а":
                res = chr(ord("я") - k + 1)
            elif i == "А":
                res = chr(ord("Я") - k + 1)
            else:
                res = chr(ord(i) - k)
            res2 += res
        else:
            res2 += i
    return res2


sentence = input("\tВведите строку: ")
k = int(input("\tВведите число K: "))
res2 = dec_sentence(sentence, k)
print(f"\t{res2}")


# 20
print("20 Дана строка, содержащая латинские буквы и скобки трех видов: «()», \n" +
      "«[]», «{}». Если скобки расставлены правильно (то есть каждой \n" +
      "открывающей соответствует закрывающая скобка того же вида), то \n" +
      "вывести число 0. В противном случае вывести или номер позиции, в \n" +
      "которой расположена первая ошибочная скобка, \n" +
      "или, если закрывающих скобок не хватает, число –1.")


def check_brackets(string):
    stack = []
    brackets = {'(': ')', '[': ']', '{': '}'}
    for i, char in enumerate(string):
        if char in brackets.keys():
            stack.append(char)
        elif char in brackets.values():
            if not stack or brackets[stack[-1]] != char:
                return i
            stack.pop()
    if stack:
        return -1
    return 0


res = check_brackets(input("\tВведите строку: "))
print(res)

# Контрольные вопросы
# 1. К какому типу относятся строки (последовательности / непоследовательности, изменяемые / неизменяемые)
#   и, что это означает?
#    Строки относятся к последовательностям и являются неизменяемыми. Это означает, что строки представляют собой упорядоченные коллекции символов, и после создания строки нельзя изменить ее содержимое.
# 2. Как осуществляется доступ к отдельному элементу строки?
#    Можно обратиться по индексу, так как каждый символ в троке имеет свой индекс
# 3. Как получить срез строки?
#    Для получения среза можно использовать синтаксис [первый индекс:конечный индекс:шаг].
# 4. Что означает термин неизменяемый объект, строки являются изменяемыми или нет?
#    Означает, что после создания объекта, его значение нельзя изменить. Строки являются неизменяемыми.
# 5. Как называется кодировка, поддерживающая кодирование буквенноцифровых символов? Расскажите о ее структуре.
#    Кодировка называется ASCII. Всего есть 128 буквенноцифровых символов.
#    ASCII резервирует первые 32 кодовые точки (числа 0-31 в десятичном исчислении) и последнюю (число 127 в десятичном исчислении) для управляющих символов.
# 6. Перечислите основные функции для работы с символами. Приведите примеры.
#    ord() - функция для получения кода символа,
#    chr() - функция для получения символа по его коду,
#    isalpha() - функция для проверки является ли символ буквой,
#    isdigit() - функция для проверки является ли символ цифрой,
#    isalnum() - функция для проверки является ли символ буквой или цифрой
#    islower() - функция для проверки является ли символ строчной буквой,
#    isupper() - функция для проверки является ли символ прописной буквой
# 7. Перечислите методы работы со строками, позволяющие преобразовывать символы строки к различным регистрам клавиатуры.
#    lower() - функция для преобразования строки в нижний регистр,
#    upper() - функция для преобразования строки в верхний регистр,
#    swapcase() - функция для преобразования строки в верхний регистр,
#    title() - функция для преобразования строки в верхний регистр,
#    capitalize() - функция для преобразования строки в верхний регистр
# 8. Какой метод позволяет разбить строку на подстроки? Напишите его синтаксис.
#    Метод split(separator, maxsplit)
#    separator - разделитель, по которому будет производиться разбиение строки.
#    maxsplit - максимальное количество разбиений
# 9. Какой метод отвечает за преобразование строки в список? Напишите его синтаксис.
#    Метод list(string)
#    string - исходная строка
# 10. Какой метод отвечает за обратное преобразование списка в строку? Напишите его синтаксис
#     Метод " ".join(list)
#     " " - разделитель, который будет использован для объединения элементов списка
#     list - исходный список
# 11. Приведите примеры базовых алгоритмов строк.
#     i = string.find(substring)
#     i = string.replace(old_string, new_string)
#     i = string.count(substring)
# 12. Какими способами можно получить срез строки?
#     Используя срез [первый индекс:конечный индекс:шаг]
